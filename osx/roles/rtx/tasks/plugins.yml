---
- name: "Install plugins"
  ansible.builtin.shell: "rtx plugins install {{ item.name }} {{ item.repository | default() }}"
  args:
    creates: "{{ rtx_dir }}/plugins/{{ item.name }}"
  with_items: "{{ rtx_plugins }}"
  when: rtx_plugins | length > 0
  become_user: "{{ rtx_user }}"
  changed_when: false

- name: Specific tasks for {{ item }}
  ansible.builtin.include_tasks: plugins/{{ item }}.yml
  loop:
    - nodejs
    - python
    - golang
    - java
    - rust
  when: item in plugins_to_install

- name: Install apps
  ansible.builtin.shell: "rtx install {{ item.0.name }}@{{ item.1 }}"
  args:
    creates: "{{ rtx_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  with_subelements:
    - "{{ rtx_plugins }}"
    - versions
    - flags:
      skip_missing: true
  when: rtx_plugins | length > 0
  become_user: "{{ rtx_user }}"
  changed_when: false

- name: Uninstall apps
  ansible.builtin.shell: "rtx uninstall {{ item.0.name }}@{{ item.1 }}"
  args:
    removes: "{{ rtx_dir }}/installs/{{ item.0.name }}/{{ item.1 }}"
  with_subelements:
    - "{{ rtx_plugins }}"
    - delete_versions
    - flags:
      skip_missing: true
  when: rtx_plugins | length > 0
  become_user: "{{ rtx_user }}"
  changed_when: false

- name: Set global app versions
  ansible.builtin.shell: "rtx use --global {{ item.name }}@{{ item.global | default(item.versions | difference(item.delete_versions|default([])) | sort | first) }}"
  when: item.versions is defined
  with_items: "{{ rtx_plugins }}"
  become: true
  become_user: "{{ rtx_user }}"
  changed_when: false

- name: Set group permissions
  become: true
  ansible.builtin.file:
    path: "{{ rtx_dir }}"
    owner: "{{ rtx_user }}"
    group: "{{ rtx_group }}"
    state: directory
    recurse: true
