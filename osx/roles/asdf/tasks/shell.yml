---
- name: Set path to .zshrc
  set_fact:
    asdf_zshrc_path: "{{ asdf_home }}/.zshrc"
  when: asdf_zshrc_path is undefined

- name: Check whether .zshrc exists
  stat:
    path: "{{ asdf_zshrc_path }}"
  register: asdf_zshrc_st

- name: Resolve .zshrc symlink
  set_fact:
    asdf_zshrc_path: "{{ asdf_zshrc_st.stat.lnk_source }}"
  when: asdf_zshrc_st.stat.exists and asdf_zshrc_st.stat.islnk

- name: Load asdf in .zshrc
  blockinfile:
    dest: "{{ asdf_zshrc_path }}"
    marker: "# {mark} ANSIBLE MANAGED BLOCK: asdf"
    block: |
      if [ -e "$HOME/.asdf/asdf.sh" ]; then
        source $HOME/.asdf/asdf.sh
        source $HOME/.asdf/completions/asdf.bash
      fi
  when: asdf_zshrc_st.stat.exists

- name: Get current asdf package versions
  shell: >-
    set -o pipefail &&
    . {{ asdf_dir }}/asdf.sh &&
    asdf current {{ item.name }} |
    grep -o '{{ item.global | default(item.versions[0]) }}'
  args:
    executable: "{{ asdf_install_shell | default(omit) }}"
    chdir: "{{ asdf_home }}"
  register: asdf_plugins_versions
  with_items: "{{ asdf_plugins }}"
  when: item.versions is defined
  changed_when: False
  failed_when: False

- name: "Set global asdf package versions"
  shell: >-
    . {{ asdf_dir }}/asdf.sh &&
    asdf global {{ item.item.name }}
    {{ item.item.global | default(item.item.versions[0]) }}
  args:
    executable: "{{ asdf_install_shell | default(omit) }}"
    chdir: "{{ asdf_home }}"
  when: item.skipped is not defined and item.rc != 0
  with_items: "{{ asdf_plugins_versions.results }}"
